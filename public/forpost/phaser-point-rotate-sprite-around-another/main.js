
var game = new Phaser.Game(320, 240, Phaser.AUTO, 'gamearea');

game.state.add('static', {

    create: function () {

        // objects for centerPoint, and a thing that
        // I want to rotate around it.
        var thing = {
            x: 100,
            y: 100
        },
        center = {
            x: 0,
            y: 0
        };

        // Using the static method
        Phaser.Point.rotate(thing, center.x, center.y, 45, true, 100);

        console.log(Math.floor(thing.x), Math.floor(thing.y)); // 0 100

    }

});

game.state.add('proto', {

    create: function () {

        // objects for centerPoint, and a thing that
        // I want to rotate around it.
        var thing = new Phaser.Point(100, 100),
        center = new Phaser.Point(0, 0);

        // Using the prototype method
        thing.rotate(center.x, center.y, 45, true, 100);

        console.log(Math.floor(thing.x), Math.floor(thing.y)); // 0 100

    }

});

// make a sprite sheet, and start sprites state
game.state.add('boot', {

    create: function () {

        // sprite sheet generated by canvas
        var canvas = document.createElement('canvas'),
        ctx = canvas.getContext('2d');
        canvas.width = 64;
        canvas.height = 32;

        // blue frame
        ctx.fillStyle = '#0000ff';
        ctx.fillRect(0, 0, 32, 32);

        // red frame
        ctx.fillStyle = '#ff0000';
        ctx.fillRect(32, 0, 32, 32);

        game.cache.addSpriteSheet('sheet-block', null, canvas, 32, 32, 2, 0, 0);

        game.state.start('vanilla');

    }

});

// make sprites function
var mkSprites = function () {

    var sprite,
    x,
    y,
    cx = game.world.centerX,
    cy = game.world.centerY;

    // thing
    x = cx + 100 - 16;
    y = cy - 16;
    sprite = game.add.sprite(x, y, 'sheet-block', 0);
    sprite.name = 'thing';

    // center
    x = cx - 16;
    y = cy - 16;
    sprite = game.add.sprite(x, y, 'sheet-block', 1);
    sprite.name = 'center';

};

// sprites1 state in which the thing sprite, just rotates around center
game.state.add('sprites1', {

    create: mkSprites,

    update: function () {

        var thing = game.world.getByName('thing'),
        center = game.world.getByName('center');

        Phaser.Point.rotate(thing, center.x, center.y, 1, true, 100);

    }

});

// sprites2 state, heart shaped pattern of thing rotating around
// center, and center is on the move
game.state.add('sprites2', {

    create: function () {

        var thing;

        mkSprites();

        thing = game.world.getByName('thing');

        thing.data.dist = 50;

    },

    update: function () {

        var thing = game.world.getByName('thing'),
        center = game.world.getByName('center'),
        angle = Phaser.Point.angle({
                x: thing.x + 16,
                y: thing.y + 16
            }, {
                x: center.x + 16,
                y: center.y + 16
            }),
        per = Math.abs(angle) / Math.PI;
        thing.data.dist = per * 75 + 50;

        // rotate
        Phaser.Point.rotate(thing, center.x, center.y, 10, true, thing.data.dist);

        center.x += 2;

        center.x = Phaser.Math.wrap(center.x, -125, game.world.width + 125);

    }

});

// vanilla js
game.state.add('vanilla', {

    create: function () {

        var thing;

        mkSprites();

        thing = game.world.getByName('thing');

        thing.data = {
            a: 0,
            f: 0,
            fMax: 50,
            dist: 50
        };

    },

    update: function () {

        var thing = game.world.getByName('thing'),
        center = game.world.getByName('center');

        // some variables that have to do with
        // the current state of a movement
        var per = thing.data.f / thing.data.fMax,
        bias = Math.abs(per - 0.5) / 0.5,
        offset = Math.PI;

        // set angle based on the above variables
        thing.data.a = Math.PI - (Math.PI / 2) + Math.PI * bias + offset;

        // set the x, and y position of thing, relative to center
        // using Math.cos, and Math.sin, as well as the angle found above,
        // and a distance variable
        thing.x = center.x + Math.cos(thing.data.a) * thing.data.dist;
        thing.y = center.y + Math.sin(thing.data.a) * thing.data.dist;

        thing.data.f += 1;
        thing.data.f = Phaser.Math.wrap(thing.data.f, 0, thing.data.fMax - 1);

        center.x += 2;
        center.x = Phaser.Math.wrap(center.x, -125, game.world.width + 125);

    }

});

game.state.start('boot');
