
var Enemy = {};

Enemy.setup = function () {

    this.game.data = {

        maxEnemys: 5,
        enemys: game.add.group(),
        score: 0

    };

};

Enemy.mkSheet = function (game) {

    // sprite sheet generated by canvas
    var canvas = document.createElement('canvas'),
    ctx = canvas.getContext('2d');
    canvas.width = 64;
    canvas.height = 32;

    // blue frame
    ctx.fillStyle = '#0000ff';
    ctx.fillRect(0, 0, 32, 32);

    // red frame
    ctx.fillStyle = '#ff0000';
    ctx.fillRect(32, 0, 32, 32);

    game.cache.addSpriteSheet('sheet-block', null, canvas, 32, 32, 2, 0, 0);

};

Enemy.createEnemyPool = function () {

    var i = 0,
    data = this.game.data;
    while (i < data.maxEnemys) {

        var enemy = data.enemys.create(0, 0, 'sheet-block');
        enemy.data = {

            dx: Math.random() * 3.5 + 0.5,
            dy: Math.random() * 3.5 + 0.5,
            hp: 2

        };

        enemy.kill();

        enemy.events.onKilled.add(Enemy.onKill, this);

        enemy.inputEnabled = true;
        enemy.events.onInputDown.add(function (enemy) {

            enemy.data.hp -= 1;

            if (enemy.data.hp === 1) {

                enemy.frame = 1;

            }

            if (enemy.data.hp <= 0) {

                enemy.kill();

            }

        });

        i += 1;

    }

};

// re-spawn a dead enemy
Enemy.spawn = function (a) {

    var enemys = this.game.data.enemys;

    var dead = enemys.getFirstDead(false, 0, 0, 'sheet-block', 0);

    if (dead) {

        dead.data = {

            dx: Math.random() * 3.5 + 0.5,
            dy: Math.random() * 3.5 + 0.5,
            hp: 2

        };

    }

};

Enemy.onKill = function (sprite) {

    var game = this.game,
    spriteSpeed = (sprite.data.dx + sprite.data.dy) / 8,
    speedBonus = 175, // points bonus for speed.
    perKill = 25; // points per kill

    // score formula
    game.data.score += perKill + Math.floor(spriteSpeed * speedBonus);

};

Enemy.update = function () {

    var data = this.game.data,
    game = this.game;

    data.enemys.forEach(function (enemy) {

        enemy.x = Phaser.Math.wrap(enemy.x += enemy.data.dx, -32, game.world.width + 32);
        enemy.y = Phaser.Math.wrap(enemy.y += enemy.data.dy, -32, game.world.height + 32);

    });

};

var game = new Phaser.Game(320, 240, Phaser.AUTO, 'gamearea');

game.state.add('boot', {

    create: function () {

        // setup game data object
        Enemy.setup.call(this);

        Enemy.mkSheet(this.game);

        Enemy.createEnemyPool.call(this);

        // start demo, and do not clear the world
        game.state.start('demo', false, false);

    }

});

game.state.add('demo', {

    create: function () {

        // call Enemy.spawn every second
        game.time.events.loop(1000, Enemy.spawn, this);

        // text display object to show score
        var text = game.add.text(5, 5, '', {
                fill: 'white'
            });
        text.name = 'disp-score';

    },

    update: function () {

        var data = this.game.data;

        Enemy.update.call(this);

        game.world.getByName('disp-score').text = 'score: ' + data.score;

    }

});

game.state.start('boot');
